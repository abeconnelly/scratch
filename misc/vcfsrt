#!/bin/bash
#
#  This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################
#
# Sorts vcf file by prepending a chromosome number and taking the position field (column 2)
# to each line and then calling the unix 'sort' utility.
#

VERSION="0.1.0"

function show_version {
  echo "version: $VERSION"
}

function show_help {
  echo "version: $VERSION"
  echo "usage:"
  echo "  vcfsrt [-i ifn] [-o ofn] [-a|-d] [-c|-p|-l] [-h] [ifn]"
  echo ""
  echo "    -i ifn    Input file (stdin default)"
  echo "    -o ofn    Output file (stdout default)"
  echo "    -a        Ascending order (default)"
  echo "    -d        Descending order"
  echo "    -c        Common order (1-22, x, y, mt) (default ordering)"
  echo "    -p        Picard order (1-22, mt, x, y)"
  echo "    -l        Lexigraphical order (1, 10-19, 2, 21-22, 3-9, mt, x, y)"
  echo "    -v        show version"
  echo "    -h        help"
}

VERBOSE=0

ORD_X=23
ORD_Y=24
ORD_M=25

ifn="-"
ofn="/dev/stdout"
sort_dir=""
sort_key="n"
common=1
ordalt=0
lex=0

getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

SHORT=i:ho:adlpcvV
LONG=input:,output:,help,ascending,descending,lexigraphical,picard,common

PARSED=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi

ifn_set="no"

eval set -- "$PARSED"
while true; do
  case "$1" in
    -i|--input)
      ifn="$2"
      ifn_set="yes"
      shift 2
      ;;
    -o|--output)
      ofn="$2"
      shift 2
      ;;
    -a|--ascending)
      sort_dir=""
      sort_key="n"
      shift
      ;;
    -d|--descending)
      sort_dir="-r"
      sort_key="nr"
      shift
      ;;
    -c|--common)
      common=1
      shift
      ;;
    -p|--picard)
      common=0
      shift
      ;;
    -l|--lexigraphical)
      lex=1
      shift
      ;;
    -V|--verbose)
      VERBOSE=1
      shift
      ;;
    -v|--version)
      show_version
      exit 0
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "$1 $2"
      echo "invalid argument"
      show_help
      exit 3
  esac
done

if [[ $# -eq 0 ]] && [[ "$ifn_set" == "no" ]]; then
  show_help
  exit 1
fi

if [[ $# -eq 1 ]] ; then
  if [[ "$ifn" != "-" ]] ; then
    echo "conflicting input file parameters, must specify one of '-i' or input file, not both"
    show_help
    exit 2
  fi
  ifn="$1"
fi

if [[ "$VERBOSE" -eq 1 ]] ; then
  echo "## vcfsrt $VERSION: ifn:$ifn, ofn:$ofn, common:$common, lex:$lex, ord(x,y,m):($ORD_X,$ORD_Y,$ORD_M), sort_dir:$sort_dir, sort_key:$sort_key"
fi

fifdir=`mktemp -d /tmp/vcfsrt.XXXXXXXX`
fifohdr="$fifdir/fifohdr"
fifobody="$fifdir/fifobody"
mkfifo $fifohdr
mkfifo $fifobody

## simple lex order, easy to do without any fancy processing
##
if [[ "$lex" == 1 ]] ; then
  sort_ord=""
  if [[ "$sort_dir" != "" ]] ; then
    sort_ord="r"
  fi

  egrep '^#' $fifohdr > $ofn & pidhdr=$!
  egrep -v '^#' $fifobody | sort -k1,1$sort_ord -k2,2$sort_ord -s >> $ofn & pidbody=$!

  cat $ifn | tee $fifohdr | tee $fifobody > /dev/null

  wait $pidhdr $pidbody
  rm $fifohdr $fifobody
  exit
fi

if [[ "$common" -eq 1 ]] ; then
  ORD_X=23
  ORD_Y=24
  ORD_M=25
else
  ORD_M=23
  ORD_X=24
  ORD_Y=25
fi

## Depending on the desired ordering, prepend each field with a number
## for the chromosome.  Use sort to (stably) order the rows appropriately
## and then strip them off afterwards.
##

egrep '^#' $fifohdr > $ofn & pidhdr=$!
egrep -v '^#' $fifobody | python <( \
cat <<EOF
#!/usr/bin/python

import errno
import subprocess as sp
import tempfile

fn = "/dev/stdin"

chrom_map = {
    "0" : 0, "#": 0,
    "1" : 1, "chr1": 1,
    "2" : 2, "chr2": 2,
    "3" : 3, "chr3": 3,
    "4" : 4, "chr4": 4,
    "5" : 5, "chr5": 5,
    "6" : 6, "chr6": 6,
    "7" : 7, "chr7": 7,
    "8" : 8, "chr8": 8,
    "9" : 9, "chr9": 9,
    "10" : 10, "chr10": 10,
    "11" : 11, "chr11": 11,
    "12" : 12, "chr12": 12,
    "13" : 13, "chr13": 13,
    "14" : 14, "chr14": 14,
    "15" : 15, "chr15": 15,
    "16" : 16, "chr16": 16,
    "17" : 17, "chr17": 17,
    "18" : 18, "chr18": 18,
    "19" : 19, "chr19": 19,
    "20" : 20, "chr20": 20,
    "21" : 21, "chr21": 21,
    "22" : 22, "chr22": 22,
    "x" : $ORD_X, "chrx": $ORD_X,
    "y" : $ORD_Y, "chry": $ORD_Y,
    "mt" : $ORD_M, "chrm": $ORD_M,
    "" : 26
    }

chrom_pos = {}
for v in range(27):
  chrom_pos[v] = 0

try:
  with open(fn, "r") as fp:
    for line in fp:

      if len(line)==0 or line[0] == '\r' or line[0] == '\n':
        print ""
        continue
      if line[0] == '#':
        print "0" + "\t" + str(chrom_pos[0]) + "\t" + line,
        chrom_pos[0]+=1
        continue
      fields = line.split("\t")
      chrom_val = len(chrom_map)
      if fields[0].lower() in chrom_map:
        chrom_val = chrom_map[fields[0].lower()]
      print str(chrom_val) + "\t" + fields[2] + "\t" + line,
      chrom_pos[chrom_val] += 1

except IOError, e:
  if e.errno == errno.EPIPE:
    pass
  else:
    raise e
EOF
) | sort -k1,1$sort_key -k2,2$sort_key -s | cut -f3- >> $ofn & pidbody=$!

cat $ifn | tee $fifohdr | tee $fifobody > /dev/null

wait $pid0 $pid1
rm $fifohdr $fifobody

